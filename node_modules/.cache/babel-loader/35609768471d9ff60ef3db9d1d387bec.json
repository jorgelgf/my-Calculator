{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"anchorOrigin\", \"classes\", \"badgeContent\", \"component\", \"children\", \"className\", \"components\", \"componentsProps\", \"invisible\", \"max\", \"overlap\", \"showZero\", \"variant\", \"theme\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize, usePreviousProps } from '@mui/utils';\nimport composeClasses from '../composeClasses';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport { getBadgeUtilityClass } from './badgeUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    anchorOrigin,\n    overlap,\n    invisible,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', variant, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`, invisible && 'invisible']\n  };\n  return composeClasses(slots, getBadgeUtilityClass, classes);\n};\n\nconst BadgeUnstyled = /*#__PURE__*/React.forwardRef(function BadgeUnstyled(props, ref) {\n  const {\n    anchorOrigin: anchorOriginProp = {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    classes: classesProp,\n    badgeContent: badgeContentProp,\n    component,\n    children,\n    className,\n    components = {},\n    componentsProps = {},\n    invisible: invisibleProp,\n    max: maxProp = 99,\n    overlap: overlapProp = 'rectangular',\n    showZero = false,\n    variant: variantProp = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const prevProps = usePreviousProps({\n    anchorOrigin: anchorOriginProp,\n    badgeContent: badgeContentProp,\n    max: maxProp,\n    overlap: overlapProp,\n    variant: variantProp\n  });\n  let invisible = invisibleProp;\n\n  if (invisibleProp == null && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {\n    invisible = true;\n  }\n\n  const {\n    anchorOrigin = anchorOriginProp,\n    badgeContent,\n    max = maxProp,\n    overlap = overlapProp,\n    variant = variantProp\n  } = invisible ? prevProps : props;\n\n  const ownerState = _extends({}, props, {\n    anchorOrigin,\n    badgeContent,\n    classes: classesProp,\n    invisible,\n    max,\n    overlap,\n    variant\n  });\n\n  let displayValue = '';\n\n  if (variant !== 'dot') {\n    displayValue = badgeContent > max ? `${max}+` : badgeContent;\n  }\n\n  const classes = useUtilityClasses(ownerState);\n  const Root = component || components.Root || 'span';\n  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);\n  const Badge = components.Badge || 'span';\n  const badgeProps = appendOwnerState(Badge, componentsProps.badge, ownerState);\n  return /*#__PURE__*/_jsxs(Root, _extends({}, rootProps, {\n    ref: ref\n  }, other, {\n    className: clsx(classes.root, rootProps.className, className),\n    children: [children, /*#__PURE__*/_jsx(Badge, _extends({}, badgeProps, {\n      className: clsx(classes.badge, badgeProps.className),\n      children: displayValue\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? BadgeUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The anchor of the badge.\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'right',\n   * }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * If `true`, the badge is invisible.\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n\n  /**\n   * Wrapped shape the badge should overlap.\n   * @default 'rectangular'\n   */\n  overlap: PropTypes.oneOf(['circular', 'rectangular']),\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default BadgeUnstyled;","map":{"version":3,"sources":["/media/jorge/arquivos/PROJETOS/REACT/my-Calculator/node_modules/@mui/base/BadgeUnstyled/BadgeUnstyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_capitalize","capitalize","usePreviousProps","composeClasses","appendOwnerState","getBadgeUtilityClass","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","variant","anchorOrigin","overlap","invisible","classes","slots","root","badge","vertical","horizontal","BadgeUnstyled","forwardRef","props","ref","anchorOriginProp","classesProp","badgeContent","badgeContentProp","component","children","className","components","componentsProps","invisibleProp","max","maxProp","overlapProp","showZero","variantProp","other","prevProps","displayValue","Root","rootProps","Badge","badgeProps","process","env","NODE_ENV","propTypes","shape","oneOf","isRequired","node","object","string","elementType","bool","number"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"anchorOrigin\", \"classes\", \"badgeContent\", \"component\", \"children\", \"className\", \"components\", \"componentsProps\", \"invisible\", \"max\", \"overlap\", \"showZero\", \"variant\", \"theme\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize, usePreviousProps } from '@mui/utils';\nimport composeClasses from '../composeClasses';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport { getBadgeUtilityClass } from './badgeUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    anchorOrigin,\n    overlap,\n    invisible,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    badge: ['badge', variant, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`, invisible && 'invisible']\n  };\n  return composeClasses(slots, getBadgeUtilityClass, classes);\n};\n\nconst BadgeUnstyled = /*#__PURE__*/React.forwardRef(function BadgeUnstyled(props, ref) {\n  const {\n    anchorOrigin: anchorOriginProp = {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    classes: classesProp,\n    badgeContent: badgeContentProp,\n    component,\n    children,\n    className,\n    components = {},\n    componentsProps = {},\n    invisible: invisibleProp,\n    max: maxProp = 99,\n    overlap: overlapProp = 'rectangular',\n    showZero = false,\n    variant: variantProp = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const prevProps = usePreviousProps({\n    anchorOrigin: anchorOriginProp,\n    badgeContent: badgeContentProp,\n    max: maxProp,\n    overlap: overlapProp,\n    variant: variantProp\n  });\n  let invisible = invisibleProp;\n\n  if (invisibleProp == null && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {\n    invisible = true;\n  }\n\n  const {\n    anchorOrigin = anchorOriginProp,\n    badgeContent,\n    max = maxProp,\n    overlap = overlapProp,\n    variant = variantProp\n  } = invisible ? prevProps : props;\n\n  const ownerState = _extends({}, props, {\n    anchorOrigin,\n    badgeContent,\n    classes: classesProp,\n    invisible,\n    max,\n    overlap,\n    variant\n  });\n\n  let displayValue = '';\n\n  if (variant !== 'dot') {\n    displayValue = badgeContent > max ? `${max}+` : badgeContent;\n  }\n\n  const classes = useUtilityClasses(ownerState);\n  const Root = component || components.Root || 'span';\n  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);\n  const Badge = components.Badge || 'span';\n  const badgeProps = appendOwnerState(Badge, componentsProps.badge, ownerState);\n  return /*#__PURE__*/_jsxs(Root, _extends({}, rootProps, {\n    ref: ref\n  }, other, {\n    className: clsx(classes.root, rootProps.className, className),\n    children: [children, /*#__PURE__*/_jsx(Badge, _extends({}, badgeProps, {\n      className: clsx(classes.badge, badgeProps.className),\n      children: displayValue\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? BadgeUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The anchor of the badge.\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'right',\n   * }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * If `true`, the badge is invisible.\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n\n  /**\n   * Wrapped shape the badge should overlap.\n   * @default 'rectangular'\n   */\n  overlap: PropTypes.oneOf(['circular', 'rectangular']),\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default BadgeUnstyled;"]},"metadata":{},"sourceType":"module"}